@page "/"
@page "/questions"

@using System.Net.Http.Json
@using Microsoft.AspNetCore.WebUtilities

@inject HttpClient httpClient
@inject NavigationManager NavigationManager

@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

<MudGrid Class="d-flex align-center justify-start mud-width-full py-8">
    <MudItem >
        <MudText>Add Question : </MudText>
     </MudItem>
    <MudItem>
        <MudButton Class="mt-0" Variant="Variant.Filled" Size="Size.Small" dense="true" Color="Color.Secondary" @onclick="() => AddEntry()">
            Add Entry
        </MudButton>
     </MudItem>
    <MudItem>
        <MudText>Categories : </MudText>
    </MudItem>
    <MudItem>
        <MudChipSet  Filter="true">
            <MudChip Href="/" Label="true" Color="Color.Secondary" Variant="Variant.Outlined" Text="ALL"></MudChip>

            @if(questions is not null)
            {
                foreach(string qCount in questions.Select(x=>x.Category).Distinct())
                {
                    int count = questions.Count(item => item.Category.Contains(qCount));

                    <MudBadge Origin="Origin.TopRight" Content="count" Color="Color.Secondary" Overlap="true" Dot="false" Bordered="true" Class="mx-2 my-1">
                        <MudChip Href="@($"?selectedCat={qCount}")" Label="true" Color="Color.Secondary" Variant="Variant.Outlined" Text="@qCount"></MudChip>
                    </MudBadge>
                }
            }
        </MudChipSet>
    </MudItem>
</MudGrid>
<MudDivider DividerType="DividerType.Middle" Class="mb-2" />

@if (selectedCat != null && questions is not null)
{
    questionsFilter.Clear();

    @foreach(var q in questions)
    {
        if (q.Category.Contains(selectedCat))
            questionsFilter.Add(q);
    }

    <MudTable Items="@questionsFilter" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Questions,bool>(FilterFunc1)" FixedHeader="true" FixedFooter="false" SortLabel="Sort By" Height="420px">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Technical Questions for category : @selectedCat</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Immediate="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <ColGroup>
            <col style="width:10%;" />
            <col style="width:20%;" />
            <col style="width:30%;" />
            <col style="width:40%;" />
        </ColGroup>
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Questions, object>(x=>x.Id)">ID</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Questions, object>(x=>x.Category)">Category</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Questions, object>(x=>x.Title)">Question</MudTableSortLabel></MudTh>
            <MudTh>Action</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.Id</MudTd>
            <MudTd DataLabel="Category">@context.Category</MudTd>
            <MudTd DataLabel="Question">@context.Title</MudTd>
            <MudTd DataLabel="Action">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => ShowEntry(context.Id)">
                    Show Answer
                </MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Info" @onclick="() => EditEntry(context.Id)">
                    Edit
                </MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Error" @onclick="() => DeleteEntry(context.Id)">
                    Delete
                </MudButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{5,10,20}" />
        </PagerContent>
    </MudTable>
}
else
{
    <MudTable Items="@questions" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Questions,bool>(FilterFunc1)" FixedHeader="true" FixedFooter="false" SortLabel="Sort By" Height="420px">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Technical Questions .NET</MudText>
            <MudSpacer />
            <MudSelect @bind-Value="stringValue" Dense="true" T="string" Label="Search By..." Variant="Variant.Text" Class="mt-0 px-1" style="max-width: 250px">
                <MudSelectItem Value="@("Content")">All</MudSelectItem>
                <MudSelectItem Value="@("Category")">Category</MudSelectItem>
                <MudSelectItem Value="@("Title")">Question</MudSelectItem>
            </MudSelect>
            <MudTextField @bind-Value="searchString" Placeholder="Search" Immediate="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <ColGroup>
            <col style="width:10%;" />
            <col style="width:20%;" />
            <col style="width:30%;" />
            <col style="width:40%;" />
        </ColGroup>
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Questions, object>(x=>x.Id)">ID</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Questions, object>(x=>x.Category)">Category</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Questions, object>(x=>x.Title)">Question</MudTableSortLabel></MudTh>
            <MudTh>Action</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.Id</MudTd>
            <MudTd DataLabel="Category">@context.Category</MudTd>
            <MudTd DataLabel="Question">@context.Title</MudTd>
            <MudTd DataLabel="Action">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => ShowEntry(context.Id)">
                    Show Answer
                </MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Info" @onclick="() => EditEntry(context.Id)">
                    Edit
                </MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Error" @onclick="() => DeleteEntry(context.Id)">
                    Delete
                </MudButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{5,10,20,50}" />
        </PagerContent>
    </MudTable>
}

@code {
    private List<Questions> questionsFilter = new();

    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString = "";
    private string stringValue { get; set; } = "Content";

    [Parameter]
    [SupplyParameterFromQuery]
    public string? selectedCat { get; set; }

    public string? message { get; set; }

    public bool Overlap { get; set; }
    public bool Bordered { get; set; }

    private Questions[]? questions;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            questions = await httpClient.GetFromJsonAsync<Questions[]>("api/questions");

            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("selectedCat", out var value))
                selectedCat = value.First();
        }
        catch (Exception e)
        {
            message = e.Message;
        }
    }

    private void AddEntry()
    {
        NavigationManager.NavigateTo($"/questions/create");
    }

    private void ShowEntry(int entryId)
    {
        NavigationManager.NavigateTo($"/questions/{entryId}");
    }

    private void EditEntry(int entryId)
    {
        NavigationManager.NavigateTo($"/questions/{entryId}/edit");
    }

    private async Task DeleteEntry(int entryId)
    {
        var confirmResult = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this entry?");
        if (confirmResult)
        {
            await httpClient.DeleteAsync($"api/questions/{entryId}");
            Snackbar.Add($"Question {entryId} has been deleted.", Severity.Success);
            await OnInitializedAsync();
        }
    }

    private bool FilterFunc1(Questions element) => FilterFunc(element, searchString.ToLower());

    private bool FilterFunc(Questions element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (stringValue == "Title" && !(string.IsNullOrEmpty(stringValue)))
        {
            if (element.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
        }
        if (stringValue == "Category" && !(string.IsNullOrEmpty(stringValue)))
        {
            if (element.Category.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
        }
        if (stringValue == "Content" && !(string.IsNullOrEmpty(stringValue)))
        {
            if ($"{element.Content} {element.Title} {element.Category}".Contains(searchString))
                return true;
        }
        return false;
    }
}